{"version":3,"sources":["serviceWorker.js","components/Cards.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Cards","key","SearchBox","Searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","_this$state","filteredrobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCDSC,EAdF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAE5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BP,EAA1B,cAEnBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,SAAIJ,MCQQS,EAhBD,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,OAEhB,OAAOR,EAAAC,EAAAC,cAAA,WAENM,EAAOC,IAAI,SAACC,EAAMC,GAElB,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAOC,IAAKF,EAClBZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCDLgB,EAVC,SAAAlB,GAA+BA,EAA7BmB,YAA6B,IAAhBC,EAAgBpB,EAAhBoB,aAC9B,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACjBc,KAAK,SACLC,YAAY,eACZC,SAAUH,MCEGI,SARF,SAACC,GAEb,OAAOrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAGrEJ,EAAMK,YC0CKC,cAzCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcDI,eAAe,SAACC,GACfR,EAAKS,SAAS,CAACtB,YAAYqB,EAAME,OAAOC,SAdxCX,EAAKY,MAAM,CACVhC,OAAO,GACPO,YAAY,IAJDa,mFAOM,IAAAa,EAAAV,KAClBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OACbA,EAASC,SACTF,KAAK,SAAAjC,GAAI,OACV+B,EAAKJ,SAAU,CAAC7B,OAAOE,uCAQjB,IAAAoC,EACoBf,KAAKS,MAA1BhC,EADCsC,EACDtC,OAAOO,EADN+B,EACM/B,YACPgC,EAAevC,EAAOwC,OAAO,SAAAC,GACnC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASpC,EAAYmC,iBAEpD,OAAQ1C,EAAO4C,OAKdpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAWrC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACoD,EAAD,KACCtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,OAAQuC,MAPnB/C,EAAAC,EAAAC,cAAA,4BA7BasD,aCMlBC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SNsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.21c6c05a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n const Cards=({name, email, id})=>{\r\n\t\r\nreturn(\r\n\t<div className='bg-light-green dib br1 pa1 ma2 grow bw2 shadow-5 tc'>\t\r\n\t\t<img alt='robot' src={`https://robohash.org/${id}? 15*19 ` }/>\r\n\t\r\n\t\t\t<div>\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t</div>\r\n\r\n\t);\r\n}\r\nexport default Cards;\r\n","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\nconst CardList=({robots})=>{\r\n\r\n\treturn(<div>\r\n\t\r\n\t{robots.map((user, i)=>{\r\n\r\n\t\treturn(<Cards key={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email} />);\r\n\t}\r\n\t)\r\n\t}\r\n\t</div>\r\n\t);\r\n}\r\n\texport default CardList;\r\n","import React from 'react';\r\nconst SearchBox=({Searchfield, searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa6 tc'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='Search' \r\n\t\tplaceholder='Search robot'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t</div>)\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n\r\n\treturn(<div style={{overflowY:'scroll',border:'5px solid black', height:'800px'}}>\r\n\r\n\r\n\t\t\t{props.children}\r\n\t\t</div>) ;\r\n};\r\nexport default Scroll;\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport  './App.css'\r\nimport Scroll from'../components/Scroll'\r\nclass App extends Component{\r\n\t\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tSearchfield:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=>\r\n\t\t\t response.json()) \r\n\t\t\t.then(user=>\r\n\t\t\tthis.setState( {robots:user}));\r\n\t\t\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({Searchfield:event.target.value})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst{robots,Searchfield}= this.state;\r\n\t\tconst filteredrobots=robots.filter(robot=>{\r\n\t\treturn robot.name.toLowerCase().includes(Searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\treturn !robots.length ?\r\n\t\t\t\t\r\n\t\t\t\t\t<h1>loading</h1>:\r\n\t\t\t\t\r\n\t\t\t(\r\n\t\t\t\t<div className='tc f3'>\r\n\t\t\t\t\t<h1>Robots app</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredrobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*import Cards from './Cards';*/\n/*import CardList from './CardList';*/\nimport * as serviceWorker from './serviceWorker';\nimport tachyons from 'tachyons';\nimport App from './containers/App';\n/*import {robots} from './robots'*/;\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}